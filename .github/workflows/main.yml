name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy Services
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    env:
      IMAGE_PREFIX: ghcr.io/pauk456

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          version: '8.x'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose Plugin
        run: |
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-linux-x86_64  -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          docker compose version

      - name: Build and start services with Docker Compose
        run: |
          docker compose up -d --build

      - name: Wait for Gateway to be ready
        run: |
          timeout=120
          while [ $timeout -gt 0 ]; do
            curl -s http://localhost:5004/api/Test | grep -q "Hello from Gataway!" && echo "Gateway is UP" && exit 0
            sleep 5
            timeout=$((timeout - 5))
          done
          echo "Timeout waiting for Gateway"
          exit 1

      - name: Restore Test Project
        run: |
          cd TestProjectNUnit
          dotnet restore

      - name: Run Integration Tests
        run: |
          cd TestProjectNUnit
          dotnet test --logger trx --results-directory ./test-results

      # üîí –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π –æ–±—Ä–∞–∑–æ–≤

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------------------------
      # –§—Ä–æ–Ω—Ç–µ–Ω–¥
      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./ReactApp
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/frontend:latest

      # ServerInteraction
      - name: Build and push ServerInteraction
        uses: docker/build-push-action@v5
        with:
          context: ./ServerInteraction
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/serverinteraction:latest

      # VideoService
      - name: Build and push VideoService
        uses: docker/build-push-action@v5
        with:
          context: ./VideoService
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/videoservice:latest

      # TitleService
      - name: Build and push TitleService
        uses: docker/build-push-action@v5
        with:
          context: ./TitleService
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/titleservice:latest

      # SearchService
      - name: Build and push SearchService
        uses: docker/build-push-action@v5
        with:
          context: ./SearchService
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/searchservice:latest

      # GatewayService
      - name: Build and push GatewayService
        uses: docker/build-push-action@v5
        with:
          context: ./GatewayService
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/gatewayservice:latest

      # TitleRecommendationService
      - name: Build and push TitleRecommendationService
        uses: docker/build-push-action@v5
        with:
          context: ./TitleRecommendationService
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/titlerecommendationservice:latest

      # UserService
      - name: Build and push UserService
        uses: docker/build-push-action@v5
        with:
          context: ./UserService
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/userservice:latest

      # DbUpdater
      - name: Build and push DbUpdater
        uses: docker/build-push-action@v5
        with:
          context: ./DbUpdater
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/dbupdater:latest